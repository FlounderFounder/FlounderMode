name: Auto-Update Terms

on:
  pull_request:
    paths:
      - 'terms/*.json'
    types: [opened, synchronize]

jobs:
  validate-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate JSON files
      run: |
        echo "Validating JSON files in terms/ directory..."
        for file in terms/*.json; do
          if [ -f "$file" ]; then
            echo "Validating $file..."
            if ! node -e "JSON.parse(require('fs').readFileSync('$file', 'utf8'))"; then
              echo "❌ Invalid JSON in $file"
              exit 1
            else
              echo "✅ Valid JSON in $file"
            fi
          fi
        done
    
    - name: Check for duplicate terms
      run: |
        echo "Checking for duplicate terms..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          const terms = [];
          const termFiles = fs.readdirSync('terms').filter(f => f.endsWith('.json'));
          
          for (const file of termFiles) {
            const content = JSON.parse(fs.readFileSync(\`terms/\${file}\`, 'utf8'));
            terms.push({ term: content.term, file: file });
          }
          
          // Check for duplicates
          const seen = new Set();
          const duplicates = [];
          
          for (const { term, file } of terms) {
            const normalized = term.toLowerCase().trim();
            if (seen.has(normalized)) {
              duplicates.push({ term, file });
            } else {
              seen.add(normalized);
            }
          }
          
          if (duplicates.length > 0) {
            console.error('❌ Duplicate terms found:');
            duplicates.forEach(({ term, file }) => {
              console.error(\`  - \"\${term}\" in \${file}\`);
            });
            process.exit(1);
          } else {
            console.log('✅ No duplicate terms found');
          }
        "
    
    - name: Generate HTML pages for new terms
      run: |
        echo "Generating HTML pages for all terms..."
        node scripts/generate-html.js
    
    - name: Update main.js with new terms
      run: |
        echo "Updating main.js with new term files..."
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Read current main.js
          let mainJs = fs.readFileSync('scripts/main.js', 'utf8');
          
          // Get all JSON files in terms directory
          const termFiles = fs.readdirSync('terms')
            .filter(f => f.endsWith('.json'))
            .sort();
          
          // Find the termFiles array in main.js
          const arrayStart = mainJs.indexOf('const termFiles = [');
          const arrayEnd = mainJs.indexOf('];', arrayStart);
          
          if (arrayStart === -1 || arrayEnd === -1) {
            console.error('❌ Could not find termFiles array in main.js');
            process.exit(1);
          }
          
          // Create new array content
          const newArrayContent = termFiles.map(file => \`    '\${file}'\`).join(',\\n');
          
          // Replace the array
          const newMainJs = mainJs.substring(0, arrayStart) + 
            'const termFiles = [\\n' + newArrayContent + '\\n  ];' +
            mainJs.substring(arrayEnd + 2);
          
          // Write back to file
          fs.writeFileSync('scripts/main.js', newMainJs);
          console.log('✅ Updated main.js with term files:', termFiles.join(', '));
        "
    
    - name: Check if files were modified
      id: check-changes
      run: |
        if git diff --quiet scripts/main.js pages/; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit changes (main.js and HTML pages)
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scripts/main.js pages/
        git commit -m "Auto-update: Add new term files and generate HTML pages
        
        This commit was automatically generated by GitHub Actions when new term files were added to the terms/ directory.
        
        Changes:
        - Updated scripts/main.js with new term files
        - Generated HTML pages for all terms in pages/ directory"
        
        # Push the commit back to the PR branch
        git push origin HEAD:${{ github.head_ref }}
    
    - name: Add PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 Automated validation results')
          );
          
          const comment = `🤖 **Automated validation results:**
          
          ✅ **JSON Validation**: All term files have valid JSON format
          ✅ **Duplicate Check**: No duplicate terms found
          ✅ **File Integration**: Updated \`scripts/main.js\` with new term files
          ✅ **HTML Generation**: Generated individual HTML pages for all terms
          
          Your term has been automatically integrated into the site! The new term will be available once this PR is merged.
          
          **What was created:**
          - Individual JSON file in \`terms/\` directory
          - Individual HTML page in \`pages/\` directory
          - Updated main.js to include the new term
          
          ---
          *This comment was automatically generated by GitHub Actions.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
